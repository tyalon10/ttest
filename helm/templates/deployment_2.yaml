kind: Deployment
apiVersion: apps/v1
metadata:
# set your user name
  name: {{ .Release.Name }}-2
annotations:
   argocd.argoproj.io/sync-wave: "10"
spec:
  replicas: {{ .Values.ReplicaNumber }}
  selector:
    matchLabels: 
# set your user name
      app: {{ .Release.Name }}-2
 
  template:
    metadata:
      labels:
# set your user name
        app: {{ .Release.Name }}-2
    spec:
      volumes:
      - name: index-html
        configMap:
          name: index.html
          defaultMode: 420
      containers:
        - resources: {}
          terminationMessagePath: /dev/termination-log
          name: {{ .Release.Name }}-2
          ports:
            - containerPort: {{ .Values.containers.containerPort }}
              protocol: TCP
          imagePullPolicy: IfNotPresent
# update with the iamge you build in part 1
          image: {{ .Values.containers.image }}:{{ .Values.containers.tag }}
          volumeMounts:
            - name: index-html
              mountPath: {{ .Values.volume.mount.path  }} # this will mount the html.index file to it application location
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readiness.path  }} # this check the application url path
              port: {{ .Values.containers.containerPort }} # In which port the Application is listening
              scheme: HTTP
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds  }} # the time is waiting befor testing the application path
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds  }} # the time for timeout
            periodSeconds: {{ .Values.probes.readiness.periodSeconds  }} # the abount of time to wait between checks
            successThreshold: {{ .Values.probes.readiness.successThreshold  }} # count to decalre seccessfull 
            failureThreshold: {{ .Values.probes.readiness.failureThreshold  }} # count to decalre failure
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.liveness.path  }}
              port: {{ .Values.containers.containerPort }}
              scheme: HTTP
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds  }} # the time is waiting befor testing the application path
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds  }} # the time for timeout
            periodSeconds: {{ .Values.probes.liveness.periodSeconds  }} # the abount of time to wait between checks
            successThreshold: {{ .Values.probes.liveness.successThreshold  }} # count to decalre seccessfull 
            failureThreshold: {{ .Values.probes.liveness.failureThreshold  }}
          env:
            - name: PORT
              value: {{ .Values.containers.containerPort | quote }}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10